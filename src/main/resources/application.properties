azurestorage.queues.transactionexpiredevents.name=${TRANSACTIONS_EXPIRATION_QUEUE_NAME}
azurestorage.queues.transactionsrefund.name=${TRANSACTIONS_REFUND_QUEUE_NAME}
azurestorage.queues.transactionrefundretry.name=${TRANSACTIONS_REFUND_RETRY_QUEUE_NAME}
azurestorage.queues.transactionclosepaymentretry.name=${TRANSACTIONS_CLOSE_PAYMENT_RETRY_QUEUE_NAME}
azurestorage.connectionstring=${QUEUE_CONNECTION_STRING}

spring.cloud.azure.storage.queue.account-key=${ECOMMERCE_STORAGE_QUEUE_KEY}
spring.cloud.azure.storage.queue.account-name=${ECOMMERCE_STORAGE_QUEUE_ACCOUNT_NAME}
spring.cloud.azure.storage.queue.endpoint=${ECOMMERCE_STORAGE_QUEUE_ENDPOINT}

nodo.uri=${NODO_URI}
nodo.readTimeout=${NODO_READ_TIMEOUT}
nodo.connectionTimeout=${NODO_CONNECTION_TIMEOUT}
spring.data.mongodb.uri=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/?ssl=${MONGO_SSL_ENABLED}
spring.data.mongodb.database=ecommerce
paymentTransactionsGateway.uri=${PAYMENT_TRANSACTIONS_GATEWAY_URI}/
paymentTransactionsGateway.readTimeout=${PAYMENT_TRANSACTIONS_GATEWAY_READ_TIMEOUT}
paymentTransactionsGateway.connectionTimeout=${PAYMENT_TRANSACTIONS_GATEWAY_CONNECTION_TIMEOUT}

scheduler.authorizationRequestedEventTimeoutSeconds=${AUTH_REQUESTED_TIMEOUT_SECONDS}

server.port=9000

management.endpoint.health.probes.enabled=true

refundRetry.eventOffsetSeconds=${REFUND_RETRY_EVENT_BASE_INTERVAL_SECONDS}
refundRetry.maxAttempts=${REFUND_RETRY_EVENT_MAX_ATTEMPTS}

closePaymentRetry.eventOffsetSeconds=${CLOSE_PAYMENT_RETRY_EVENT_BASE_INTERVAL_SECONDS}
closePaymentRetry.maxAttempts=${CLOSE_PAYMENT_RETRY_EVENT_MAX_ATTEMPTS}